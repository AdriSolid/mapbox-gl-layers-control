{"version":3,"sources":["LayersControl.js","App.js","serviceWorker.js","index.js"],"names":["LayersControl","map","useContext","MapContext","useEffect","addControl","MapboxLayersControl","title","layersDefinition","name","group","children","id","LAYERS_INFO","color","xtrsnH","xtrsB","Map","ReactMapboxGl","accessToken","antialias","App","style","center","zoom","pitch","bearing","containerStyle","height","width","position","top","left","type","sourceId","sourceLayer","filter","minZoom","paint","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8KAyCeA,MApCf,WACE,IAAMC,EAAMC,qBAAWC,KAgCvB,OA9BAC,qBAAU,WACJH,GACFA,EAAII,WACF,IAAIC,sBAAoB,CACtBC,MAAO,SACPC,iBAAkB,CAChB,CACEC,KAAM,aACNC,OAAO,EACPC,SAAU,CACR,CACEC,GAAI,cACJH,KAAM,eAER,CACEG,GAAI,cACJH,KAAM,gBAER,CACEG,GAAI,cACJH,KAAM,uBAQnB,CAACR,IAEG,MClCHY,EAAc,CAClB,CACED,GAAI,cACJE,MAAO,MACPC,OAAQ,CAAC,IAAK,CAAC,MAAO,UAAW,GACjCC,MAAO,CAAC,MAAO,eAEjB,CACEJ,GAAI,cACJE,MAAO,SACPC,OAAQ,CAAC,MAAO,UAChBC,MAAO,CAAC,IAAK,CAAC,MAAO,UAAW,IAElC,CACEJ,GAAI,cACJE,MAAO,YACPC,OAAQ,CAAC,IAAK,CAAC,MAAO,UAAW,KACjCC,MAAO,CAAC,MAAO,YAIbC,EAAMC,YAAc,CACxBC,YAAa,6FACbC,WAAW,IA4CEC,MAzCf,WAoBE,OACE,kBAACJ,EAAD,CACEK,MAAM,kCACNC,OAAQ,EAAE,QAAS,SACnBC,KAAM,CAAC,MACPC,MAAO,CAAC,IACRC,QAAS,EAAE,MACXC,eAAgB,CACdC,OAAQ,OACRC,MAAO,OACPC,SAAU,WACVC,IAAK,EACLC,KAAM,IAGInB,EAjCAZ,KAAI,gBAAGW,EAAH,EAAGA,GAAIE,EAAP,EAAOA,MAAOC,EAAd,EAAcA,OAAQC,EAAtB,EAAsBA,MAAtB,OAChB,kBAAC,IAAD,CACEJ,GAAIA,EACJqB,KAAK,iBACLC,SAAS,YACTC,YAAY,WACZC,OAAQ,CAAC,KAAM,UAAW,QAC1BC,QAAS,GACTC,MAAO,CACL,uBAAwBxB,EACxB,wBAAyBC,EACzB,sBAAuBC,EACvB,yBAA0B,SAsB9B,kBAAC,EAAD,QCtDcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9b9281f0.chunk.js","sourcesContent":["import { useContext, useEffect } from \"react\";\nimport { MapContext } from \"react-mapbox-gl\";\nimport { MapboxLayersControl } from \"@adrisolid/mapbox-gl-layers-control\";\nimport \"@adrisolid/mapbox-gl-layers-control/styles.css\";\n\nfunction LayersControl() {\n  const map = useContext(MapContext);\n\n  useEffect(() => {\n    if (map) {\n      map.addControl(\n        new MapboxLayersControl({\n          title: \"Floors\",\n          layersDefinition: [\n            {\n              name: \"Select all\",\n              group: true,\n              children: [\n                {\n                  id: \"buildings-1\",\n                  name: \"First floor\",\n                },\n                {\n                  id: \"buildings-2\",\n                  name: \"Second floor\",\n                },\n                {\n                  id: \"buildings-3\",\n                  name: \"Third floor\",\n                },\n              ],\n            },\n          ],\n        }),\n      );\n    }\n  }, [map]);\n\n  return null;\n}\n\nexport default LayersControl;\n","import React from \"react\";\nimport ReactMapboxGl, { Layer } from \"react-mapbox-gl\";\nimport LayersControl from \"./LayersControl\";\n\nconst LAYERS_INFO = [\n  {\n    id: \"buildings-1\",\n    color: \"red\",\n    xtrsnH: [\"/\", [\"get\", \"height\"], 2],\n    xtrsB: [\"get\", \"min_height\"],\n  },\n  {\n    id: \"buildings-2\",\n    color: \"orange\",\n    xtrsnH: [\"get\", \"height\"],\n    xtrsB: [\"/\", [\"get\", \"height\"], 2],\n  },\n  {\n    id: \"buildings-3\",\n    color: \"lightblue\",\n    xtrsnH: [\"*\", [\"get\", \"height\"], 1.5],\n    xtrsB: [\"get\", \"height\"],\n  },\n];\n\nconst Map = ReactMapboxGl({\n  accessToken: \"pk.eyJ1IjoidmljbWl0Y2giLCJhIjoiY2swcGVwemN0MGt1ajNicGt3Z2UwbjN2OCJ9.Q0K2RBp8n9LBipcm3edDRQ\",\n  antialias: true,\n});\n\nfunction App() {\n  function addControl(layers) {\n    return layers.map(({ id, color, xtrsnH, xtrsB }) => (\n      <Layer\n        id={id}\n        type=\"fill-extrusion\"\n        sourceId=\"composite\"\n        sourceLayer=\"building\"\n        filter={[\"==\", \"extrude\", \"true\"]}\n        minZoom={15}\n        paint={{\n          \"fill-extrusion-color\": color,\n          \"fill-extrusion-height\": xtrsnH,\n          \"fill-extrusion-base\": xtrsB,\n          \"fill-extrusion-opacity\": 0.6,\n        }}\n      ></Layer>\n    ));\n  }\n\n  return (\n    <Map\n      style=\"mapbox://styles/mapbox/dark-v10\"\n      center={[-74.0066, 40.7135]}\n      zoom={[15.5]}\n      pitch={[45]}\n      bearing={[-17.6]}\n      containerStyle={{\n        height: \"100%\",\n        width: \"100%\",\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n      }}\n    >\n      {addControl(LAYERS_INFO)}\n      <LayersControl />\n    </Map>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}